/*
 * Copyright (C) 2024 Picking-gh <picking@woft.name>
 *
 * SPDX-License-Identifier: MIT
 */

package main

import (
	"context"
	"crypto/md5"
	"database/sql"
	"fmt"
	"log/slog"
	"os"
	"path/filepath"
	"time"

	_ "github.com/mattn/go-sqlite3" // Import SQLite driver
)

const cachePath = ".cache/at-rss.db"

// Cache is a struct that holds information related to RSS feed items.
// It uses SQLite to persist data.
type Cache struct {
	db   *sql.DB
	path string
}

// NewCache creates a new Cache object and initializes the SQLite database.
func NewCache(ctx context.Context) (*Cache, error) {
	cache := &Cache{}

	homeDir, err := os.UserHomeDir()
	if err != nil {
		slog.Error("Failed to locate user's home directory.", "err", err)
		return nil, err
	}
	cache.path = filepath.Join(homeDir, cachePath)

	// Open the SQLite database file
	db, err := sql.Open("sqlite3", cache.path)
	if err != nil {
		slog.Error("Failed to open SQLite database.", "err", err)
		return nil, err
	}
	cache.db = db

	// Initialize tables
	if err := cache.initializeTables(); err != nil {
		return nil, err
	}

	go cache.startCleanupScheduler(ctx)

	return cache, nil
}

// initializeTables creates necessary tables if they do not exist.
func (c *Cache) initializeTables() error {
	_, err := c.db.Exec(`CREATE TABLE IF NOT EXISTS feed_items (
		  md5_hash TEXT,
		  item_guid TEXT,
		  timestamp INTEGER,
		  PRIMARY KEY (md5_hash, item_guid)
	  )`)
	if err != nil {
		return err
	}

	_, err = c.db.Exec(`CREATE TABLE IF NOT EXISTS info_hash (
		  btih TEXT PRIMARY KEY,
		  timestamp INTEGER
	  )`)

	_, err = c.db.Exec(`CREATE TABLE IF NOT EXISTS feed_urls (
		md5_hash TEXT PRIMARY KEY,
		feed_url TEXT
	)`)

	return err
}

// AddFeedURL adds a feed_url and its corresponding SHA-1 hash to the feed_urls table.
func (c *Cache) AddFeedURL(feedURL string) (string, error) {
	md5Hash := fmt.Sprintf("%x", md5.Sum([]byte(feedURL)))

	_, err := c.db.Exec(`INSERT OR IGNORE INTO feed_urls (md5_hash, feed_url) VALUES (?, ?)`, md5Hash, feedURL)
	if err != nil {
		return "", err
	}

	return md5Hash, nil
}

// Get returns a map of GUIDs and their timestamps for the specified key (e.g., "infoHash" or feed URL).
func (c *Cache) Get(key string) map[string]int64 {
	var query string
	var param string

	if key == "infoHash" {
		// Get all stored info_hash values
		query = `SELECT btih, timestamp FROM info_hash`
		param = ""
	} else {
		// Assume the key is a feed URL, convert it to SHA-1 and get associated items
		md5Hash, _ := c.AddFeedURL(key)
		query = `SELECT item_guid, timestamp FROM feed_items WHERE md5_hash = ?`
		param = md5Hash
	}

	rows, err := c.db.Query(query, param)
	if err != nil {
		return map[string]int64{}
	}
	defer rows.Close()

	result := make(map[string]int64)
	for rows.Next() {
		var guid string
		var timestamp int64
		if err := rows.Scan(&guid, &timestamp); err != nil {
			return map[string]int64{}
		}
		result[guid] = timestamp
	}

	return result
}

// Set stores the given value with the associated key (e.g., "infoHash" or feed URL) in the cache.
func (c *Cache) Set(key string, items map[string]int64) {
	if len(items) == 0 {
		return
	}

	var query string
	var param string

	if key == "infoHash" {
		// Store info_hash values directly in the info_hash table
		query = `INSERT OR REPLACE INTO info_hash (btih, timestamp) VALUES (?, ?)`
		param = "" // `key` itself would be the info_hash in this case
	} else {
		// Assume the key is a feed URL, convert it to SHA-1 and store associated items
		md5Hash, _ := c.AddFeedURL(key)
		query = `INSERT OR REPLACE INTO feed_items (md5_hash, item_guid, timestamp) VALUES (?, ?, ?)`
		param = md5Hash
	}

	tx, err := c.db.Begin()
	if err != nil {
		slog.Error("Failed to begin transaction.", "err", err)
		return
	}

	stmt, err := tx.Prepare(query)
	if err != nil {
		slog.Error("Failed to prepare SQL statement.", "err", err)
		tx.Rollback()
		return
	}
	defer stmt.Close()

	for guid, timestamp := range items {
		if key == "infoHash" {
			if _, err := stmt.Exec(guid, timestamp); err != nil {
				slog.Error("Failed to execute SQL statement.", "err", err)
				tx.Rollback()
				return
			}
		} else {
			if _, err := stmt.Exec(param, guid, timestamp); err != nil {
				slog.Error("Failed to execute SQL statement.", "err", err)
				tx.Rollback()
				return
			}
		}
	}

	if err := tx.Commit(); err != nil {
		slog.Error("Failed to commit transaction.", "err", err)
	}
}

// RemoveNotIn removes entries from the cache that are not present in the provided value map.
func (c *Cache) RemoveNotIn(key string, validItems map[string]int64) {
	if len(validItems) == 0 {
		return
	}

	var query string
	var param string

	if key == "infoHash" {
		// Example for infoHash handling (assuming such a case is required)
		query = `DELETE FROM info_hash WHERE btih NOT IN (?)`
		param = ""
	} else {
		// Assume the key is a feed URL, convert it to SHA-1
		md5Hash, _ := c.AddFeedURL(key)
		query = `DELETE FROM feed_items WHERE md5_hash = ? AND item_guid NOT IN (?)`
		param = md5Hash
	}

	tx, err := c.db.Begin()
	if err != nil {
		slog.Error("Failed to begin transaction.", "err", err)
		return
	}

	stmt, err := tx.Prepare(query)
	if err != nil {
		slog.Error("Failed to prepare SQL statement.", "err", err)
		tx.Rollback()
		return
	}
	defer stmt.Close()

	validGUIDs := ""
	for guid := range validItems {
		if validGUIDs != "" {
			validGUIDs += ","
		}
		validGUIDs += "'" + guid + "'"
	}

	if _, err := stmt.Exec(param, validGUIDs); err != nil {
		slog.Error("Failed to execute SQL statement.", "err", err)
		tx.Rollback()
		return
	}

	if err := tx.Commit(); err != nil {
		slog.Error("Failed to commit transaction.", "err", err)
	}
}

// Flush commits all changes to the SQLite database.
func (c *Cache) Flush() error {
	// SQLite commits changes automatically, so nothing needs to be done here.
	return nil
}

// cleanupExpiredEntries removes entries with timestamps older than 24 hours.
func (c *Cache) cleanupExpiredEntries() {
	oneDayAgo := time.Now().Add(-24 * time.Hour).Unix()

	tx, err := c.db.Begin()
	if err != nil {
		slog.Error("Failed to begin transaction.", "err", err)
		return
	}

	_, err = tx.Exec(`DELETE FROM info_hash WHERE timestamp < ?`, oneDayAgo)
	if err != nil {
		slog.Error("Failed to execute SQL statement.", "err", err)
		tx.Rollback()
		return
	}

	if err := tx.Commit(); err != nil {
		slog.Error("Failed to commit transaction.", "err", err)
	}
}

// startCleanupScheduler initiates a scheduled cleanup task that runs every hour.
func (c *Cache) startCleanupScheduler(ctx context.Context) {
	ticker := time.NewTicker(time.Hour)
	defer ticker.Stop()

	for {
		select {
		case <-ctx.Done():
			return
		case <-ticker.C:
			c.cleanupExpiredEntries()
		}
	}
}
